/*

  My first attempt at using templates and solving partial powers.
  Hasn't been fully tested but appears to work for all numbers.
  
  TODO:
  Make it more efficient such as optimising the recursive algorithm for pow
  and looking for a better way of calculating the root.

*/

#include <iostream>

using namespace std;

template <typename B, typename R>
double root(B t_base, R t_root, double error = 0.0000000001, double last = 1){
    double new_root = t_root * (t_base / last + last);
    double difference = t_base / new_root - t_base / last;
    if( difference < error && difference > error * -1){
        return new_root;
    }
    else{
        return root(t_base, t_root, error, new_root);
    }

}

template <typename B, typename P>
double pow(B base, P power){
    if(power >= 1){
        return 1.0 * base * pow(base, power - 1);
    }
    else if (power > 0){
        return root(base, power);
    }
    else if (power == 0){
        return 1.0;
    }
    else if (power <= -1){
        return (1.0 / (base * pow(base, (power + 1) * -1)));
    }
    else if (power < 0){
        return 1.0 / root(base, power * -1);
    }
    return 1.0;
}

template <typename B, typename P>
void printPow(B base, P power){
    cout << "Base: " << base << "\t Power: " << power << "\t result: " << pow(base, power) << endl;
}



int main()
{
    printPow(7, -2.5);
    return 0;
}
